#-------------------------------
# Colors
#-------------------------------
colorscheme catppuccin_mocha

#-------------------------------
# Statusline
#-------------------------------
set global modelinefmt %{
    %val{bufname} [%opt{filetype}]
    · %val{cursor_line}:%val{cursor_char_column}
    · {{context_info}} {{mode_info}}
}

#-------------------------------
# Plugins
#-------------------------------
eval %sh{ kak-tree-sitter -dks --session $kak_session }
eval %sh{ kak-lsp --kakoune -s $kak_session }

#-------------------------------
# UI
#-------------------------------
set-option global scrolloff 5,1
add-highlighter global/match_brackets show-matching
add-highlighter global/line_numbers number-lines -hlcursor -separator ' '
add-highlighter global/search ref search
add-highlighter global/selected_text ref selected_text
add-highlighter global/current-line line '%val{cursor_line}' CursorLine

#-------------------------------
# Hooks
#-------------------------------
hook global WinSetOption filetype=(javascript|typescript|css|scss|json|markdown|yaml|html) %{
    set-option buffer formatcmd "prettier --stdin-filepath=%val{buffile}"
    hook buffer -group format BufWritePre .* format
}

hook global WinSetOption filetype=sh %{
    set-option buffer formatcmd "shfmt -i 2 -sr -ci"
    hook buffer -group format BufWritePre .* format
}

hook global WinCreate .* %{ git show-diff }
hook global BufWritePost .* %{ git show-diff }
hook global BufReload .* %{ git show-diff }

hook global WinCreate ^[^*]+$ %{editorconfig-load}

#-------------------------------
# Commands
#-------------------------------
define-command find-buffer -docstring 'Switch to a buffer' %{ evaluate-commands %sh{
    BUFFER=$(eval set -- "$kak_buflist"; for buf in "$@"; do echo "$buf"; done | \
    fzf-tmux -p 90% \
    --preview="bat -n --color=always {}" \
    --preview-window=right:70%)
    [ -n "$BUFFER" ] && echo "eval -client '$kak_client' 'buffer $BUFFER'" | kak -p "$kak_session"
} }

define-command find-word -docstring 'Find word' %{ evaluate-commands %sh{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case"
    INITIAL_QUERY="${*:-}"
    FILE=$(: | fzf-tmux -p 90% --ansi --disabled --query "$INITIAL_QUERY" \
    --bind "start:reload:$RG_PREFIX {q}" \
    --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
    --delimiter : \
    --preview 'bat --color=always {1} --highlight-line {2}' \
    --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
    --bind 'enter:become(echo {1} {2})')
    [ -n "$FILE" ] && echo "eval -client '$kak_client' 'edit ${FILE}'" | kak -p ${kak_session}
} }

define-command -docstring 'Open a file' -params 0 find-file %{
evaluate-commands %sh{
    FILE=$(find-file)
    [ -n "$FILE" ] && echo "eval -client '$kak_client' 'edit ${FILE}'" | kak -p ${kak_session}
  }
}

define-command -docstring 'Pick a git file' -params 0 pick-git-file %{
evaluate-commands %sh{
    FILE=$(pick-git-file)
    [ -n "$FILE" ] && echo "eval -client '$kak_client' 'edit ${FILE}'" | kak -p ${kak_session}
  }
}

define-command -docstring 'Open a file picker' -params 0 file-picker %{
evaluate-commands %sh{
    tmux display-popup -w90% -h90% -b rounded -E 'nnn -p - -- | \
    xargs printf "eval -client '$kak_client' edit '%s';" | \
    kak -p '${kak_session}''
  }
}

define-command -hidden open_buffer_picker %{
  prompt buffer: -menu -buffer-completion %{
    buffer %val{text}
  }
}

define-command -hidden open_file_picker %{
    prompt file: -menu -shell-script-candidates 'fd --type=file' %{
    edit -existing %val{text}
  }
}

define-command -hidden open_rg_picker %{
  prompt search: %{
    prompt refine: -menu -shell-script-candidates "rg -in --column '%val{text}'" %{
      evaluate-commands "edit -existing %sh{
        IFS=':' read -r file line column rest <<< ""$kak_text""
        echo \""$file\"" $line $column
      }"
    }
  }
}

define-command edit-kakrc %{ e ~/.config/kak/kakrc }

#-------------------------------
# LSP
#-------------------------------
lsp-auto-signature-help-enable
set-option global lsp_hover_anchor true
set-option global lsp_auto_show_code_actions true

hook global WinSetOption filetype=(rust|typescript|sh|markdown|latex|go|c) %{
  lsp-enable-window
  lsp-diagnostic-lines-disable window
  lsp-inline-diagnostics-disable window
  lsp-inlay-diagnostics-enable window
  lsp-inlay-hints-enable window
  lsp-inlay-code-lenses-enable window
}

hook global WinSetOption filetype=(rust|latex|go) %{
  hook window BufWritePre .* lsp-formatting-sync
}

#-------------------------------
# Mappings
#-------------------------------
map global normal <c-h> :bp<ret>
map global normal <c-l> :bn<ret>
map global normal <c-x> :delete-buffer<ret>


map global user b ':find-buffer<ret>' 		-docstring '󰓩 buffers'
map global user f ':find-file<ret>'       	-docstring '󰍉 find file'
map global user / ':find-word<ret>'       	-docstring '󰍉 search project'
map global user y '<a-|>wl-copy<ret>' 		-docstring 'yank to system clipboard'

# Surround mode
map global user s ':surround<ret>'		-docstring 'surround mode'

# Git Mode
declare-user-mode git
map global user g ':enter-user-mode git<ret>' -docstring 'git mode'
map global git n ':git next-hunk<ret>'        -docstring 'goto next hunk'
map global git p ':git prev-hunk<ret>'        -docstring 'goto previous hunk'

# LSP Mode
declare-user-mode user-lsp
map global user l ':enter-user-mode user-lsp<ret>'       -docstring 'lsp mode'
map global user-lsp ( ':lsp-previous-function<ret>'      -docstring 'jump to the previous function'
map global user-lsp ) ':lsp-next-function<ret>'          -docstring 'jump to the next function'
map global user-lsp I ':lsp-implementation<ret>'         -docstring 'list implementations'
map global user-lsp K ':lsp-hover-buffer<ret>'           -docstring 'hover in a dedicated buffer'
map global user-lsp P ':lsp-workspace-symbol<ret>'       -docstring 'list workspace symbols'
map global user-lsp R ':lsp-rename-prompt<ret>'          -docstring 'rename'
map global user-lsp S ':lsp-document-symbol<ret>'        -docstring 'list workspace symbols'
map global user-lsp a ':lsp-code-actions<ret>'           -docstring 'code action'
map global user-lsp c ':lsp-code-lens<ret>'              -docstring 'execute code lens'
map global user-lsp d ':lsp-diagnostics<ret>'            -docstring 'list diagnostics'
map global user-lsp h ':lsp-highlight-references<ret>'   -docstring 'highlight references'
map global user-lsp i ':lsp-incoming-calls<ret>'         -docstring 'incoming calls'
map global user-lsp k ':lsp-hover<ret>'                  -docstring 'hover'
map global user-lsp o ':lsp-outgoing-calls<ret>'         -docstring 'outgoing calls'
map global user-lsp p ':lsp-workspace-symbol-incr<ret>'  -docstring 'pick workspace symbol'
map global user-lsp r ':lsp-references<ret>'             -docstring 'list references'
map global user-lsp s ':lsp-goto-document-symbol<ret>'   -docstring 'pick document symbol'
map global user-lsp x ':lsp-find-error<ret>'             -docstring 'jump to the prev/next error'
